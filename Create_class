#Создадим Класс хранилища
class Bucket: 
  '''Хранилище объектов для статического сайта'''
    def __init__(self):
        self.content = []
    
    def add(self, obj):
        '''Поместить объект в бакет'''
        print('Добавлен', obj)
        self.content.append(obj)
    
     def inspect(self):
        '''Проверить содержимое'''
        print('Текущее содержимое бакета:')
        for item in self.content:
            print('     ', item)

  website = Bucket()
  website.add('index.html')
  website.add('main.css')
  website.inspect()
  
  
  print(website.content)
  
  
  
  class Truck:
      '''Самосвал загружает в ковш и выгружает из него в другом месте'''

    def __init__(self, *args: tuple) -> None:
        print('Загружено в ковш:')
        self._args = args
        [print(i) for i in args]

    def __len__(self):
        return len(self._args)

    def __eq__(self, other: object) -> bool:
        return (isinstance(other, type(self)) 
                and self._args 
                    == other._args)

    def __hash__(self) -> int:
        return hash(self._args)

    def __del__(self):
        print('Содержимое выгружено из ковша!')



transport1 = Truck('песок', 'щебень', 'земля', 'блоки')
transport2 = Truck('песок', 'щебень', 'земля', 'блоки')

# Проверка на вхождение объекта
hash_d = {transport1: 1, transport2: 3}
print(hash_d) #  хэш один и тот же!

# если закомментировать функцию eq,
# то хэш нового экземпляра будет всегда разный
